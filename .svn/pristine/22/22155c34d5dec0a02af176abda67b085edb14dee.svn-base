package com.kkl.kklplus.b2b.sf.service;

import com.google.gson.reflect.TypeToken;
import com.kkl.kklplus.b2b.sf.entity.*;
import com.kkl.kklplus.b2b.sf.http.command.OperationCommand;
import com.kkl.kklplus.b2b.sf.http.config.B2BSFProperties;
import com.kkl.kklplus.b2b.sf.http.request.OrderOperationRequestParam;
import com.kkl.kklplus.b2b.sf.http.request.OrderPictureRequestParam;
import com.kkl.kklplus.b2b.sf.http.response.OrderHandleResponse;
import com.kkl.kklplus.b2b.sf.http.response.OrderHandleResultResponse;
import com.kkl.kklplus.b2b.sf.http.response.ResponseBody;
import com.kkl.kklplus.b2b.sf.http.utils.OkHttpUtils;
import com.kkl.kklplus.b2b.sf.mapper.OrderInfoMapper;
import com.kkl.kklplus.b2b.sf.mapper.SFOrderHandleMapper;
import com.kkl.kklplus.b2b.sf.utils.GsonUtils;
import com.kkl.kklplus.b2b.sf.utils.QuarterUtils;
import com.kkl.kklplus.b2b.sf.utils.SFUtils;
import com.kkl.kklplus.b2b.sf.utils.SpringContextHolder;
import com.kkl.kklplus.common.exception.MSErrorCode;
import com.kkl.kklplus.common.response.MSResponse;

import com.kkl.kklplus.entity.b2b.common.B2BProcessFlag;
import com.kkl.kklplus.entity.b2bcenter.rpt.B2BOrderProcesslog;
import com.kkl.kklplus.entity.viomi.sd.VioMiOrderHandle;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import sun.misc.BASE64Encoder;

import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @Auther wj
 * @Date 2020/11/24 11:46
 */

@Service
@Slf4j
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class OrderHandleService {

    @Autowired
    private OrderInfoService orderInfoService;
    @Autowired
    private B2BProcesslogService b2BProcesslogService;
    @Autowired
    private SFOrderHandleMapper sfOrderHandleMapper;
    @Autowired
    private SysLogService sysLogService;
    @Autowired
    private ThreadPoolTaskExecutor taskExecutor;
    @Autowired
    private OrderPicService orderPicService;

    private static B2BSFProperties sfProperties = SpringContextHolder.getBean(B2BSFProperties.class);
    /**
     * 预约成功
     * @param sfOrderHandle
     * @return
     */
    public MSResponse appointment(SfOrderHandle sfOrderHandle) {

        String strMsg  = validateOrderHandle(sfOrderHandle);
        StringBuilder stringBuilder = new StringBuilder();
        if (StringUtils.isNotBlank(strMsg)) {
            stringBuilder.append(strMsg);
        }
        if (stringBuilder.length() >0) {
            return new MSResponse(MSErrorCode.FAILURE);
        }

        common(sfOrderHandle,"appointment",OrderChangeTypeEnum.SAPPOINTMENT_ED_STATE.value);

        return new MSResponse(MSErrorCode.SUCCESS);
    }



    private String validateOrderHandle(SfOrderHandle sfOrderHandle) {
        StringBuilder stringBuilder = new StringBuilder();
        if (sfOrderHandle.getB2bOrderId() == null) {
            stringBuilder.append("B2BOrderId不能为空.");
        }

        if (StringUtils.isBlank(sfOrderHandle.getAppTime())){
            stringBuilder.append("预约时间不能为空.");
        }
        if (sfOrderHandle.getCreateById() == null) {
            stringBuilder.append("createById不能为空.");
        }
        if (sfOrderHandle.getCreateDt() == null) {
            stringBuilder.append("createDt不能为空.");
        }
        return stringBuilder.toString();
    }


    /**
     *安装异常
     * @param sfOrderHandle
     * @return
     */
    public MSResponse installException(SfOrderHandle sfOrderHandle){
        String strMsg  = validate(sfOrderHandle);
        StringBuilder stringBuilder = new StringBuilder();
        if (StringUtils.isNotBlank(strMsg)) {
            stringBuilder.append(strMsg);
        }
        if (stringBuilder.length() >0) {
            return new MSResponse(MSErrorCode.FAILURE);
        }
        common(sfOrderHandle,"installException",OrderChangeTypeEnum.INSTALL_EXCEPTION.value);
        return new MSResponse(MSErrorCode.SUCCESS);
    }

    private String validate(SfOrderHandle sfOrderHandle){
        StringBuilder stringBuilder = new StringBuilder();
        if (sfOrderHandle.getB2bOrderId() == null) {
            stringBuilder.append("B2BOrderId不能为空.");
        }
        if (sfOrderHandle.getOperateCode() == null) {
            stringBuilder.append("操作码不能为空.");
        }
        if (sfOrderHandle.getCreateById() == null) {
            stringBuilder.append("createById不能为空.");
        }
        if (sfOrderHandle.getCreateDt() == null) {
            stringBuilder.append("createDt不能为空.");
        }
        return stringBuilder.toString();
    }

    /**
     *分配安装师傅
     * @param sfOrderHandle
     * @return
     */
    public MSResponse installMaster(SfOrderHandle sfOrderHandle){
        String strMsg  = validate(sfOrderHandle);
        StringBuilder stringBuilder = new StringBuilder();
        if (StringUtils.isNotBlank(strMsg)) {
            stringBuilder.append(strMsg);
        }
        if (stringBuilder.length() >0) {
            return new MSResponse(MSErrorCode.FAILURE);
        }
        common(sfOrderHandle,"installMaster",OrderChangeTypeEnum.DISPATCH_INSTALLER.value);
        return new MSResponse(MSErrorCode.SUCCESS);
    }


    public MSResponse finish(SfOrderHandle sfOrderHandle){
        String strMsg  = validate(sfOrderHandle);
        StringBuilder stringBuilder = new StringBuilder();
        if (StringUtils.isNotBlank(strMsg)) {
            stringBuilder.append(strMsg);
        }
        if (stringBuilder.length() >0) {
            return new MSResponse(MSErrorCode.FAILURE);
        }
        try {
            List<MultipartFile> list = new ArrayList<MultipartFile>();
            if (sfOrderHandle.getPics().size()>0) {
                taskExecutor.execute(()->{
                    OrderPic orderPic = new OrderPic();
                    String pic = GsonUtils.getInstance().toGson(sfOrderHandle.getPics());
                    orderPic.setPicture(pic);
                    orderPic.setWaybillNo(sfOrderHandle.getWaybillNo());
                    orderPic.setCreateById(sfOrderHandle.getCreateById());
                    orderPic.setCreateDt(sfOrderHandle.getCreateDt());
                    orderPic.setTaskCode(sfOrderHandle.getTaskCode());
                    orderPicService.insert(orderPic);
                    for (String picture : sfOrderHandle.getPics()){
                        if (!picture.equals("")) {
                            MultipartFile file= OkHttpUtils.getRequestFile(picture);
                            list.add(file);
                        }
                    }
                    OrderPictureRequestParam orderPictureRequestParam = new OrderPictureRequestParam();
                    try {
                        orderPictureRequestParam.setImageType(OrderChangeTypeEnum.SJOB_DONE_STATE.value);
                        orderPictureRequestParam.setTaskCode(sfOrderHandle.getTaskCode());
                        orderPictureRequestParam.setWaybillNo(sfOrderHandle.getWaybillNo());
                        orderPictureRequestParam.setImages(list);
                        orderPictureRequestParam.setDigest(getDigest(list.size(),orderPictureRequestParam.getImageType(),orderPictureRequestParam.getWaybillNo()));
                        OperationCommand operationCommand = new OperationCommand();
                        operationCommand.setOpCode(OperationCommand.OperationCode.ORDER_PICTURE_UPLOAD);
                        operationCommand.setReqBody(orderPictureRequestParam);
                        ResponseBody<OrderHandleResponse> responseBody = OkHttpUtils.postSyncGenericNew(operationCommand);
                   
                    }catch (Exception e){
                        log.info("请求异常-->{}",e);
                        sysLogService.insert(1L,GsonUtils.getInstance().toGson(orderPictureRequestParam),
                                e.getMessage(),"请求异常", "pictureUpload", SFUtils.REQUESTMETHOD);
                    }
                });
            }

            taskExecutor.execute(()->{
                common(sfOrderHandle,"finish",OrderChangeTypeEnum.SJOB_DONE_STATE.value);
            });
        }catch (Exception e){
            log.info("请求异常-->{}",e);
            sysLogService.insert(1L,GsonUtils.getInstance().toGson(sfOrderHandle.getPics()),
                    e.getMessage(),"请求异常", "finish", SFUtils.REQUESTMETHOD);
        }

        return new MSResponse(MSErrorCode.SUCCESS);
    }




    public MSResponse common(SfOrderHandle sfOrderHandle,String interfaceName,Integer value){
        B2BOrderProcesslog b2BProcesslog = new B2BOrderProcesslog();
        b2BProcesslog.setUpdateById(1L);
        b2BProcesslog.setInterfaceName(interfaceName);
        b2BProcesslog.setCreateById(1L);
        b2BProcesslog.setCreateDt(System.currentTimeMillis());
        b2BProcesslog.setQuarter(QuarterUtils.getQuarter(new Date()));

        OrderInfo orderInfo =orderInfoService.findByOrderId(sfOrderHandle.getB2bOrderId());
        sfOrderHandle.setOperateCode(value);

        sfOrderHandle.setUpdateById(sfOrderHandle.getCreateById());
        sfOrderHandle.setUpdateDt(System.currentTimeMillis());
        sfOrderHandle.setKklOrderId(orderInfo.getKklOrderId());
        sfOrderHandleMapper.insert(sfOrderHandle);
        OrderOperationRequestParam orderOperationRequestParam= new OrderOperationRequestParam();
    try {

        orderOperationRequestParam.setWaybillNo(sfOrderHandle.getWaybillNo());
        orderOperationRequestParam.setOperateCode(sfOrderHandle.getOperateCode());
        orderOperationRequestParam.setTaskCode(sfOrderHandle.getTaskCode());
        orderOperationRequestParam.setOperateTime(sfOrderHandle.getOperateTime());
        orderOperationRequestParam.setContent(sfOrderHandle.getContent());
        OperationCommand command  =new OperationCommand();
        command.setReqBody(orderOperationRequestParam);
        command.setOpCode(OperationCommand.OperationCode.FOP_RECE_FIS_OPEARTION_UPLOAD);

        String reqbodyJson = GsonUtils.getInstance().toGson(orderOperationRequestParam);
        b2BProcesslog.setInfoJson(reqbodyJson);
        b2BProcesslogService.insert(b2BProcesslog);
        ResponseBody<OrderHandleResponse> responseBody = OkHttpUtils.postSyncGenericNew(command);
        b2BProcesslog.setResultJson(responseBody.getOriginalJson());
        OrderHandleResponse data = responseBody.getData();
        OrderHandleResultResponse handleResultResponse = null;

        if (responseBody.getErrorCode() == 0 && data != null && data.getApiResultCode().equals(ApiErrorCode.A1000.errorCode)){

            handleResultResponse = GsonUtils.getInstance().fromJson(data.getApiResultData(), OrderHandleResultResponse.class);

            if(handleResultResponse !=null && handleResultResponse.getSuccess()) {
                b2BProcesslog.setUpdateDt(System.currentTimeMillis());
                b2BProcesslog.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_SUCESS.value);
                b2BProcesslogService.updateProcessFlag(b2BProcesslog);
                sfOrderHandle.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_SUCESS.value);
                sfOrderHandle.setUpdateDt(System.currentTimeMillis());
                sfOrderHandleMapper.updateProcessResult(sfOrderHandle);
                return new MSResponse(MSErrorCode.SUCCESS);
            }
        }
        String errorStr = "";
        if(handleResultResponse != null){
            errorStr = handleResultResponse.getErrorMessage();
        }else if(data != null){
            errorStr = data.getApiErrorMsg();
        }else {
            errorStr =responseBody.getErrorMsg();
        }
        b2BProcesslog.setProcessComment(errorStr);
        b2BProcesslog.setUpdateDt(System.currentTimeMillis());
        b2BProcesslog.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_FAILURE.value);
        b2BProcesslogService.updateProcessFlag(b2BProcesslog);

        sfOrderHandle.setProcessComment(errorStr);
        sfOrderHandle.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_FAILURE.value);
        sfOrderHandle.setUpdateDt(System.currentTimeMillis());
        sfOrderHandleMapper.updateProcessResult(sfOrderHandle);
    }catch (Exception e){
        log.error("请求异常-->{}",e);
        sysLogService.insert(1L,GsonUtils.getInstance().toGson(orderOperationRequestParam),
                e.getMessage(),"请求异常", interfaceName, SFUtils.REQUESTMETHOD);
    }
        return new MSResponse(MSErrorCode.SUCCESS);
    }



        public static String getDigest(Integer imageNumber, Integer imageType, String waybillNo) throws Exception {
            //将业务报文+时间戳+秘钥组合成需加密的字符串(注意顺序)

                String toVerifyText = sfProperties.getDataSourceConfig().getClientCode() +imageNumber + imageType + waybillNo
                        + sfProperties.getDataSourceConfig().getMd5Key();
                //因业务报文中可能包含加号、空格等特殊字符，需要urlEnCode处理
                toVerifyText = URLEncoder.encode(toVerifyText, "UTF-8");
                //进行Md5加密
                MessageDigest md5 = MessageDigest.getInstance("MD5");
                md5.update(toVerifyText.getBytes("UTF-8"));
                byte[] md = md5.digest();
                //通过BASE64生成数字签名
                String msgDigest = new String(new BASE64Encoder().encode(md));
                return msgDigest;
    }




}
