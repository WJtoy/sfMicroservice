package com.kkl.kklplus.b2b.sf.service;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.kkl.kklplus.b2b.sf.entity.ApiOperationResponseData;
import com.kkl.kklplus.b2b.sf.entity.InstallTypeDto;
import com.kkl.kklplus.b2b.sf.entity.OrderInfo;
import com.kkl.kklplus.b2b.sf.entity.OrderRequestData;
import com.kkl.kklplus.b2b.sf.mapper.OrderInfoMapper;
import com.kkl.kklplus.b2b.sf.mq.sender.B2BCenterOrderProcessMQSend;
import com.kkl.kklplus.b2b.sf.mq.sender.B2BOrderMQSender;
import com.kkl.kklplus.b2b.sf.utils.GsonUtils;
import com.kkl.kklplus.common.exception.MSErrorCode;
import com.kkl.kklplus.common.response.MSResponse;
import com.kkl.kklplus.entity.b2bcenter.md.B2BDataSourceEnum;
import com.kkl.kklplus.entity.b2bcenter.md.B2BShopEnum;
import com.kkl.kklplus.entity.b2bcenter.pb.MQB2BOrderMessage;
import com.kkl.kklplus.entity.b2bcenter.pb.MQB2BOrderProcessMessage;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrder;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrderActionEnum;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrderSearchModel;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrderTransferResult;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
@Slf4j
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class OrderInfoService {

    @Autowired
    private B2BCenterOrderProcessMQSend orderProcessMQSend;

    @Autowired
    private B2BOrderMQSender b2BOrderMQSender;

    @Resource
    private OrderInfoMapper orderInfoMapper;

    /**
     * 获取某一页的工单信息
     * @param orderSearchModel
     * @return
     */
    public Page<OrderInfo> getList(B2BOrderSearchModel orderSearchModel) {
        if (orderSearchModel.getPage() != null) {
            PageHelper.startPage(orderSearchModel.getPage().getPageNo(), orderSearchModel.getPage().getPageSize());
            return orderInfoMapper.getList(orderSearchModel);
        }else {
            return null;
        }
    }

    public List<OrderInfo> findOrdersProcessFlag(List<B2BOrderTransferResult> orderTransferResults) {
        List<Long> ids = new ArrayList<>();
        for(B2BOrderTransferResult orderTransferResult : orderTransferResults){
            Long id = orderTransferResult.getB2bOrderId();
            ids.add(id);
        }
        return orderInfoMapper.findOrdersProcessFlagByIds(ids);
    }

    @Transactional()
    public void updateTransferResult(List<OrderInfo> wis) {
        for(OrderInfo orderInfo:wis){
            orderInfoMapper.updateTransferResult(orderInfo);
        }
    }

    public void insert(OrderInfo orderInfo){
        orderInfoMapper.insert(orderInfo);
    }

    /**
     * 判断订单号是否存在
     * @param taskCode   订单号
     * @return 1:存在  0:不存在
     */
    public OrderInfo findOrderInfo(String taskCode) {
        return orderInfoMapper.findOrderByTaskCode(taskCode);
    }

    public MSResponse validate(OrderRequestData order) {
        MSResponse msResponse = new MSResponse(MSErrorCode.SUCCESS);
        if(order == null){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("工单资料不能为空！");
            return msResponse;
        }
        String waybillNo = order.getWaybillNo();
        if(StringUtils.isBlank(waybillNo)){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("母单号waybillNo不能为空！");
            return msResponse;
        }
        String taskCode = order.getTaskCode();
        if(StringUtils.isBlank(taskCode)){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("任务编码taskCode不能为空！");
            return msResponse;
        }
        String receiverName = order.getReceiverName();
        if(StringUtils.isBlank(receiverName)){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("收件人receiverName不能为空！");
            return msResponse;
        }
        String receiverPhone = order.getReceiverPhone();
        if(StringUtils.isBlank(receiverPhone)){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("收件人电话receiverPhone不能为空！");
            return msResponse;
        }
        String receiverAddress = order.getReceiverAddress();
        if(StringUtils.isBlank(receiverAddress)){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("收件人地址receiverAddress不能为空！");
            return msResponse;
        }
        Integer serviceType = order.getServiceType();
        if(serviceType == null){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("服务类型serviceType不能为空！");
            return msResponse;
        }
        List<InstallTypeDto> installTypes = order.getInstallTypes();
        if(installTypes == null || installTypes.size() == 0){
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg("要安装的品类installTypes不能为空！");
            return msResponse;
        }
        for(InstallTypeDto item : installTypes){
            String installTypeCode = item.getInstallTypeCode();
            if(StringUtils.isBlank(installTypeCode)){
                msResponse.setErrorCode(MSErrorCode.FAILURE);
                msResponse.setMsg("安装品类编码installTypeCode不能为空！");
                return msResponse;
            }
            String installTypeName = item.getInstallTypeName();
            if(StringUtils.isBlank(installTypeName)){
                msResponse.setErrorCode(MSErrorCode.FAILURE);
                msResponse.setMsg("安装品类名installTypeName不能为空！");
                return msResponse;
            }
            Integer count = item.getCount();
            if(count == null || count <= 0){
                msResponse.setErrorCode(MSErrorCode.FAILURE);
                msResponse.setMsg("安装品类数量count不能为空或小于等于0！");
                return msResponse;
            }
        }
        return msResponse;
    }

    public void cancelledOrder(B2BOrderTransferResult workcardTransferResults) {
        orderInfoMapper.cancelledOrder(workcardTransferResults);
    }

    /**
     * 取消工单（B2B取消）
     * @param remark
     * @param id
     * @param processFlag
     * @param updateDt
     */
    public void cancelOrderFormB2B(String remark, Long id, int processFlag,Long updateDt) {
        orderInfoMapper.cancelOrderFormB2B(remark,id,processFlag,updateDt);
    }

    public ApiOperationResponseData processOrder(String msgData) {
        ApiOperationResponseData responseData = new ApiOperationResponseData();
        try {
            OrderRequestData orderRequestData = GsonUtils.getInstance().fromJson(msgData, OrderRequestData.class);
            MSResponse msResponse = validate(orderRequestData);
            if(!MSResponse.isSuccessCode(msResponse)){
                responseData.setSuccess(false);
                responseData.setErrorMessage(msResponse.getMsg());
                return responseData;
            }
            OrderInfo oInfo = findOrderInfo(orderRequestData.getTaskCode());
            if(oInfo != null){
                String status = orderRequestData.getStatus();
                if("1".equals(status)){
                    return responseData;
                }
                Long kklOrderId = oInfo.getKklOrderId();
                // 取消通知
                if(kklOrderId != null && kklOrderId > 0){
                    MQB2BOrderProcessMessage.B2BOrderProcessMessage processMessage =
                            MQB2BOrderProcessMessage.B2BOrderProcessMessage.newBuilder()
                                    .setMessageId(System.currentTimeMillis())
                                    .setB2BOrderNo(oInfo.getWaybillNo())
                                    .setKklOrderId(kklOrderId)
                                    .setB2BOrderId(oInfo.getId())
                                    .setDataSource(B2BDataSourceEnum.SF.id)
                                    .setActionType(B2BOrderActionEnum.CONVERTED_CANCEL.value).build();
                    orderProcessMQSend.send(processMessage);
                }else{
                    cancelOrderFormB2B("顺丰主动取消",oInfo.getId(),5,System.currentTimeMillis());
                }
            }else {
                OrderInfo orderInfo = parseOrderInfo(orderRequestData);
                this.insert(orderInfo);
                sendAutoTransfer(orderInfo);
            }
        }catch (Exception e){
            responseData.setSuccess(false);
            responseData.setErrorMessage("json解析异常");
        }
        return responseData;
    }

    /**
     * 自动转单
     * @param orderInfo
     */
    private void sendAutoTransfer(OrderInfo orderInfo) {
        MQB2BOrderMessage.B2BOrderMessage.Builder builder = MQB2BOrderMessage.B2BOrderMessage.newBuilder()
                .setId(orderInfo.getId())
                .setDataSource(B2BDataSourceEnum.SF.id)
                .setOrderNo(orderInfo.getTaskCode())
                .setParentBizOrderId(StringUtils.trimToEmpty(orderInfo.getCustomOrderId()))
                .setShopId(B2BShopEnum.SF.id)
                .setUserName(orderInfo.getReceiverName())
                .setUserMobile(orderInfo.getReceiverPhone())
                .setUserAddress(orderInfo.getReceiverName())
                .setDescription(StringUtils.trimToEmpty(orderInfo.getRemark()))
                .setQuarter(orderInfo.getQuarter());
        for(InstallTypeDto product:orderInfo.getInstallTypes()){
            MQB2BOrderMessage.B2BOrderItem b2BOrderItem = MQB2BOrderMessage.B2BOrderItem.newBuilder()
                    .setProductCode(product.getInstallTypeCode())
                    .setProductName(product.getInstallTypeName())
                    .setServiceType(orderInfo.getServiceType().toString())
                    .setWarrantyType("保内")
                    .setQty(product.getCount())
                    .build();
            builder.addB2BOrderItem(b2BOrderItem);
        }
        MQB2BOrderMessage.B2BOrderMessage b2BOrderMessage = builder.build();
        //调用转单队列
        b2BOrderMQSender.send(b2BOrderMessage);
    }

    private OrderInfo parseOrderInfo(OrderRequestData data) {
        OrderInfo orderInfo = new OrderInfo();
        orderInfo.setWaybillNo(data.getWaybillNo());
        orderInfo.setTaskCode(data.getTaskCode());
        orderInfo.setSubWaybillNos(data.getSubWaybillNos());
        orderInfo.setOrderSource(StringUtils.trimToEmpty(data.getOrderSource()));
        orderInfo.setCustomOrderId(StringUtils.trimToEmpty(data.getCustomOrderId()));
        orderInfo.setCargoName(StringUtils.trimToEmpty(data.getCargoName()));
        orderInfo.setTotalVolume(StringUtils.trimToEmpty(data.getTotalVolume()));
        orderInfo.setTotalWeight(StringUtils.trimToEmpty(data.getTotalWeight()));
        orderInfo.setReceiverName(data.getReceiverName());
        orderInfo.setReceiverPhone(data.getReceiverPhone());
        orderInfo.setReceiverAddress(data.getReceiverAddress());
        orderInfo.setPackageCount(data.getPackageCount());
        orderInfo.setVersion(data.getVersion());
        orderInfo.setStatus(data.getStatus());
        orderInfo.setServiceType(data.getServiceType());
        orderInfo.setRemark(StringUtils.trimToEmpty(data.getRemark()));
        orderInfo.setInstallTypes(data.getInstallTypes());
        orderInfo.setInstallTypesJson(GsonUtils.getInstance().toGson(data.getInstallTypes()));
        Map<String, String> extendInfo = data.getExtendInfo();
        if(extendInfo != null && extendInfo.size() > 0){
            orderInfo.setExtendInfo(data.getExtendInfo());
            orderInfo.setExtendInfoJson(GsonUtils.getInstance().toGson(extendInfo));
        }
        orderInfo.preInsert();
        return orderInfo;
    }
}
