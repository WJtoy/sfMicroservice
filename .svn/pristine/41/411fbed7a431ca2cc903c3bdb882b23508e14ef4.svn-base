package com.kkl.kklplus.b2b.sf.controller;

import com.github.pagehelper.Page;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.kkl.kklplus.b2b.sf.entity.InstallTypeDto;
import com.kkl.kklplus.b2b.sf.entity.OrderInfo;
import com.kkl.kklplus.b2b.sf.service.OrderInfoService;
import com.kkl.kklplus.b2b.sf.service.SysLogService;
import com.kkl.kklplus.b2b.sf.utils.GsonUtils;
import com.kkl.kklplus.b2b.sf.utils.SFUtils;
import com.kkl.kklplus.common.exception.MSErrorCode;
import com.kkl.kklplus.common.response.MSResponse;
import com.kkl.kklplus.entity.b2b.common.B2BProcessFlag;
import com.kkl.kklplus.entity.b2bcenter.md.B2BDataSourceEnum;
import com.kkl.kklplus.entity.b2bcenter.md.B2BShopEnum;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrder;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrderSearchModel;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrderTransferResult;
import com.kkl.kklplus.entity.common.MSPage;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

@Slf4j
@RestController
@RequestMapping("/orderInfo")
public class OrderInfoController {

    @Autowired
    private OrderInfoService orderInfoService;

    @Autowired
    private SysLogService sysLogService;


    /**
     * 获取工单(分页)
     * @param orderSearchModel
     * @return
     */
    @PostMapping("/getList")
    public MSResponse<MSPage<B2BOrder>> getList(@RequestBody B2BOrderSearchModel orderSearchModel) {
        Gson gson = new Gson();
        try {
            Page<OrderInfo> orderInfoPage = orderInfoService.getList(orderSearchModel);
            Page<B2BOrder> customerPoPage = new Page<>();
            for(OrderInfo orderInfo:orderInfoPage){
                B2BOrder customerPo = new B2BOrder();
                customerPo.setId(orderInfo.getId());
                customerPo.setB2bOrderId(orderInfo.getId());
                customerPo.setDataSource(B2BDataSourceEnum.SF.id);
                customerPo.setOrderNo(orderInfo.getTaskCode());
                customerPo.setParentBizOrderId(orderInfo.getCustomOrderId());
                //顺丰店铺
                customerPo.setShopId(B2BShopEnum.SF.id);
                customerPo.setSaleChannel(orderInfo.getSaleChannel());
                customerPo.setUserName(orderInfo.getReceiverName());
                customerPo.setUserMobile(orderInfo.getReceiverPhone());
                customerPo.setUserAddress(orderInfo.getReceiverAddress());
                String remark = StringUtils.trimToEmpty(orderInfo.getRemark());
                customerPo.setDescription(remark);
                customerPo.setProcessFlag(orderInfo.getProcessFlag());
                customerPo.setProcessTime(orderInfo.getProcessTime());
                customerPo.setProcessComment(orderInfo.getProcessComment());
                customerPo.setQuarter(orderInfo.getQuarter());
                List<InstallTypeDto> products = gson.fromJson(orderInfo.getInstallTypesJson(),new TypeToken<List<InstallTypeDto>>() {
                }.getType());
                for(InstallTypeDto product : products){
                    B2BOrder.B2BOrderItem orderItem = new B2BOrder.B2BOrderItem();
                    orderItem.setProductName(product.getInstallTypeName());
                    orderItem.setProductCode(product.getInstallTypeCode());
                    orderItem.setQty(product.getCount());
                    orderItem.setServiceType(orderInfo.getServiceType().toString());
                    orderItem.setWarrantyType("保内");
                    customerPo.getItems().add(orderItem);
                }
                customerPoPage.add(customerPo);
            }
            MSPage<B2BOrder> returnPage = new MSPage<>();
            returnPage.setPageNo(orderInfoPage.getPageNum());
            returnPage.setPageSize(orderInfoPage.getPageSize());
            returnPage.setPageCount(orderInfoPage.getPages());
            returnPage.setRowCount((int) orderInfoPage.getTotal());
            returnPage.setList(customerPoPage.getResult());
            return new MSResponse<>(MSErrorCode.SUCCESS, returnPage);
        } catch (Exception e) {
            log.error("查询工单失败:{}", e.getMessage());
            sysLogService.insert(1L,GsonUtils.getInstance().toGson(orderSearchModel),
                     e.getMessage(),"查询工单失败", SFUtils.ORDERLIST, SFUtils.REQUESTMETHOD);
            return new MSResponse<>(new MSErrorCode(1000, StringUtils.left(e.getMessage(),255)));
        }
    }

    /**
     * 检查工单是否可以转换
     * @param orderNos
     * @return
     */
    @PostMapping("/checkWorkcardProcessFlag")
    public MSResponse checkWorkcardProcessFlag(@RequestBody List<B2BOrderTransferResult> orderNos){
        try {
            if(orderNos == null){
                return new MSResponse(new MSErrorCode(1000, "参数错误，工单编号不能为空"));
            }
            //查询出对应工单的状态
            List<OrderInfo> orderInfos = orderInfoService.findOrdersProcessFlag(orderNos);
            if(orderInfos == null){
                return new MSResponse(MSErrorCode.FAILURE);
            }
            for (OrderInfo orderInfo : orderInfos) {
                if (orderInfo.getStatus() != null && Integer.valueOf(orderInfo.getStatus()) == 2) {
                    return new MSResponse(new MSErrorCode(1000, orderInfo.getCustomOrderId()+"工单已经取消,无法进行转换"));
                }
                if (orderInfo.getProcessFlag() != null && orderInfo.getProcessFlag() == B2BProcessFlag.PROCESS_FLAG_SUCESS.value) {
                    return new MSResponse(new MSErrorCode(1000, orderInfo.getCustomOrderId()+"工单已经转换成功,不能重复转换"));
                }
            }
            return new MSResponse(MSErrorCode.SUCCESS);
        }catch (Exception e){
            log.error("检查工单失败:{}", e.getMessage());
            sysLogService.insert(1L,GsonUtils.getInstance().toGson(orderNos),e.getMessage(),
                    "检查工单失败", SFUtils.CHECKPROCESSFLAG, SFUtils.REQUESTMETHOD);
            return new MSResponse(new MSErrorCode(1000, StringUtils.left(e.getMessage(),255)));
        }
    }

    @PostMapping("/updateTransferResult")
    public MSResponse updateTransferResult(@RequestBody List<B2BOrderTransferResult> transferResults) {
        try {
            //根据数据源分组，在根据B2BOrderID分组
            Map<Long, B2BOrderTransferResult> b2bOrderIdMap = transferResults.stream().collect(
                            Collectors.toMap(B2BOrderTransferResult::getB2bOrderId, Function.identity(),(key1, key2) -> key2));
            //查询出需要转换的工单
            List<OrderInfo> orderInfos = orderInfoService.findOrdersProcessFlag(transferResults);
            //用来存放各个数据源转换成功的数量
            Map<Integer,Integer> count = new HashMap<>();
            //存放需要转换的工单集合
            List<OrderInfo> wis = new ArrayList<>();
            for(OrderInfo orderInfo :orderInfos){
                //为转换的工单才进行更新
                if(orderInfo.getProcessFlag() != B2BProcessFlag.PROCESS_FLAG_SUCESS.value){
                    B2BOrderTransferResult transferResult = b2bOrderIdMap.get(orderInfo.getId());
                    if(transferResult != null){
                        orderInfo.setProcessFlag(transferResult.getProcessFlag());
                        orderInfo.setKklOrderId(transferResult.getOrderId());
                        orderInfo.setKklOrderNo(transferResult.getKklOrderNo());
                        orderInfo.setUpdateDt(transferResult.getUpdateDt());
                        orderInfo.setProcessComment(transferResult.getProcessComment());
                        wis.add(orderInfo);
                    }
                }
            }
            orderInfoService.updateTransferResult(wis);
            return new MSResponse(MSErrorCode.SUCCESS);
        } catch (Exception e) {
            log.error("工单转换失败:{}", e.getMessage());
            sysLogService.insert(1L, GsonUtils.getInstance().toGson(transferResults),
                     e.getMessage(),"工单转换失败", SFUtils.UPDATETRANSFERRESULT, SFUtils.REQUESTMETHOD);
            return new MSResponse(new MSErrorCode(1000, StringUtils.left(e.getMessage(),255)));

        }
    }


    @PostMapping("/cancelOrderTransition")
    public MSResponse cancelOrderTransition(@RequestBody B2BOrderTransferResult transferResult) {
        try {
            orderInfoService.cancelledOrder(transferResult);
            return new MSResponse(MSErrorCode.SUCCESS);
        }catch (Exception e){
            log.error("取消工单失败:{}", e.getMessage());
            sysLogService.insert(1L,GsonUtils.getInstance().toGson(transferResult),"取消工单失败：" + e.getMessage(),
                    "取消工单失败", SFUtils.CHECKPROCESSFLAG, SFUtils.REQUESTMETHOD);
            return new MSResponse(new MSErrorCode(1000, StringUtils.left(e.getMessage(),255)));
        }
    }
}
